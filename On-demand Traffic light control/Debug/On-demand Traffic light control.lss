
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c26  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000c9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ad  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000890  00000000  00000000  000023c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b5a  00000000  00000000  00002c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  000037b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052f  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a9  00000000  00000000  00003ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000454c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3a 02 	call	0x474	; 0x474 <main>
  74:	0c 94 11 06 	jmp	0xc22	; 0xc22 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
#include "Application.h"
uint8_t car,flag=0,flag2=0;

void APP_init(void)
{
		car=1;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <car>
		LED_init(LED_CAR_PORT,LED_CAR_GREEN_PIN);
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	81 e4       	ldi	r24, 0x41	; 65
  86:	0e 94 2b 02 	call	0x456	; 0x456 <LED_init>
		LED_init(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	81 e4       	ldi	r24, 0x41	; 65
  8e:	0e 94 2b 02 	call	0x456	; 0x456 <LED_init>
		LED_init(LED_CAR_PORT,LED_CAR_RED_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 2b 02 	call	0x456	; 0x456 <LED_init>
		
		//Pedestrian LED initialization
		LED_init(LED_PED_PORT,LED_PED_RED_PIN);
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	82 e4       	ldi	r24, 0x42	; 66
  9e:	0e 94 2b 02 	call	0x456	; 0x456 <LED_init>
		LED_init(LED_PED_PORT,LED_PED_YELLOW_PIN);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	82 e4       	ldi	r24, 0x42	; 66
  a6:	0e 94 2b 02 	call	0x456	; 0x456 <LED_init>
		LED_init(LED_PED_PORT,LED_PED_GREEN_PIN);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 2b 02 	call	0x456	; 0x456 <LED_init>
		
		//Button initialization
		BUTTON_init(BUTTON_PORT,BUTTON_PIN);
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	84 e4       	ldi	r24, 0x44	; 68
  b6:	0e 94 27 02 	call	0x44e	; 0x44e <BUTTON_init>
		
		//Timer initialization
		Timer0_init_N();
  ba:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Timer0_init_N>
			
		//Enable Global interrupts & setup rising edge detection for button
		sei();
  be:	78 94       	sei
		RISING_EDGE_SETUP();
  c0:	85 b7       	in	r24, 0x35	; 53
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	85 bf       	out	0x35, r24	; 53
		SETUP_INT0();
  c6:	8b b7       	in	r24, 0x3b	; 59
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	8b bf       	out	0x3b, r24	; 59
  cc:	08 95       	ret

000000ce <APP_start>:
}

void APP_start(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	// Red
	if(flag || flag2)
  d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag>
  d6:	81 11       	cpse	r24, r1
  d8:	3c c0       	rjmp	.+120    	; 0x152 <APP_start+0x84>
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	81 11       	cpse	r24, r1
  e0:	38 c0       	rjmp	.+112    	; 0x152 <APP_start+0x84>
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	32 c0       	rjmp	.+100    	; 0x14c <APP_start+0x7e>
	}
	else
	{
	for(int i =0;i<10;i++)
    {
	LED_on(LED_PED_PORT,LED_PED_RED_PIN);
  e8:	62 e0       	ldi	r22, 0x02	; 2
  ea:	82 e4       	ldi	r24, 0x42	; 66
  ec:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
	if(car)
  f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <car>
  f4:	88 23       	and	r24, r24
  f6:	91 f0       	breq	.+36     	; 0x11c <APP_start+0x4e>
	{
	LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
	LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
	LED_on(LED_CAR_PORT,LED_CAR_RED_PIN);
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
	Timer0_N_delay_ms(500);
 110:	84 ef       	ldi	r24, 0xF4	; 244
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
	if(flag || flag2)
	{
	}
	else
	{
	for(int i =0;i<10;i++)
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	18 c0       	rjmp	.+48     	; 0x14c <APP_start+0x7e>
	LED_on(LED_CAR_PORT,LED_CAR_RED_PIN);
	Timer0_N_delay_ms(500);
	}
	else
	{
		LED_off(LED_PED_PORT,LED_PED_RED_PIN);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	82 e4       	ldi	r24, 0x42	; 66
 120:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_on(LED_CAR_PORT,LED_CAR_RED_PIN);
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	81 e4       	ldi	r24, 0x41	; 65
 128:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		LED_on(LED_PED_PORT,LED_PED_GREEN_PIN);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	82 e4       	ldi	r24, 0x42	; 66
 130:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		Timer0_N_delay_ms(5000);
 134:	88 e8       	ldi	r24, 0x88	; 136
 136:	93 e1       	ldi	r25, 0x13	; 19
 138:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
		LED_off(LED_PED_PORT,LED_PED_GREEN_PIN);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	82 e4       	ldi	r24, 0x42	; 66
 140:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		car=1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <car>
		break;
 14a:	03 c0       	rjmp	.+6      	; 0x152 <APP_start+0x84>
	if(flag || flag2)
	{
	}
	else
	{
	for(int i =0;i<10;i++)
 14c:	ca 30       	cpi	r28, 0x0A	; 10
 14e:	d1 05       	cpc	r29, r1
 150:	5c f2       	brlt	.-106    	; 0xe8 <APP_start+0x1a>
		break;
	  }
     }
	}
	//  Yellow
	if(flag2)
 152:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	88 23       	and	r24, r24
 158:	09 f4       	brne	.+2      	; 0x15c <APP_start+0x8e>
 15a:	68 c0       	rjmp	.+208    	; 0x22c <APP_start+0x15e>
	{
		flag2=0;
 15c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 160:	6b c0       	rjmp	.+214    	; 0x238 <APP_start+0x16a>
	}
	else{
	for(int i =0;i<10;i++)
	{
	flag2=0;
 162:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_on(LED_PED_PORT,LED_PED_RED_PIN);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	82 e4       	ldi	r24, 0x42	; 66
 16a:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
	LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);                                                                                           
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	81 e4       	ldi	r24, 0x41	; 65
 172:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
	LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);                                                                                                   
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	81 e4       	ldi	r24, 0x41	; 65
 17a:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		if(car){
 17e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <car>
 182:	88 23       	and	r24, r24
 184:	51 f0       	breq	.+20     	; 0x19a <APP_start+0xcc>
	LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	0e 94 37 02 	call	0x46e	; 0x46e <LED_toggle>
	Timer0_N_delay_ms(500);
 18e:	84 ef       	ldi	r24, 0xF4	; 244
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
	if(flag2)
	{
		flag2=0;
	}
	else{
	for(int i =0;i<10;i++)
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	4b c0       	rjmp	.+150    	; 0x230 <APP_start+0x162>
	LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
	Timer0_N_delay_ms(500);
	}
	else
	{
		LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_on(LED_PED_PORT,LED_PED_RED_PIN);
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	82 e4       	ldi	r24, 0x42	; 66
 1a6:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	82 e4       	ldi	r24, 0x42	; 66
 1b6:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		for(int i =0;i<10;i++)
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	0d c0       	rjmp	.+26     	; 0x1da <APP_start+0x10c>
		{
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	81 e4       	ldi	r24, 0x41	; 65
 1c4:	0e 94 37 02 	call	0x46e	; 0x46e <LED_toggle>
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	82 e4       	ldi	r24, 0x42	; 66
 1cc:	0e 94 37 02 	call	0x46e	; 0x46e <LED_toggle>
			Timer0_N_delay_ms(500);
 1d0:	84 ef       	ldi	r24, 0xF4	; 244
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
	{
		LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
		LED_on(LED_PED_PORT,LED_PED_RED_PIN);
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
		for(int i =0;i<10;i++)
 1d8:	21 96       	adiw	r28, 0x01	; 1
 1da:	ca 30       	cpi	r28, 0x0A	; 10
 1dc:	d1 05       	cpc	r29, r1
 1de:	84 f3       	brlt	.-32     	; 0x1c0 <APP_start+0xf2>
		{
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
			Timer0_N_delay_ms(500);
		}
			LED_off(LED_PED_PORT,LED_PED_RED_PIN);
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	81 e4       	ldi	r24, 0x41	; 65
 1ec:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	82 e4       	ldi	r24, 0x42	; 66
 1f4:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_on(LED_PED_PORT,LED_PED_GREEN_PIN);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
			LED_on(LED_CAR_PORT,LED_CAR_RED_PIN);
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
			Timer0_N_delay_ms(5000);
 208:	88 e8       	ldi	r24, 0x88	; 136
 20a:	93 e1       	ldi	r25, 0x13	; 19
 20c:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
			LED_off(LED_PED_PORT,LED_PED_GREEN_PIN);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	81 e4       	ldi	r24, 0x41	; 65
 21c:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			car=1;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <car>
			flag2=1;
 226:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 22a:	06 c0       	rjmp	.+12     	; 0x238 <APP_start+0x16a>
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
	if(flag2)
	{
		flag2=0;
	}
	else{
	for(int i =0;i<10;i++)
 230:	ca 30       	cpi	r28, 0x0A	; 10
 232:	d1 05       	cpc	r29, r1
 234:	0c f4       	brge	.+2      	; 0x238 <APP_start+0x16a>
 236:	95 cf       	rjmp	.-214    	; 0x162 <APP_start+0x94>
			break;
	}
}
	}
	//Green
	if(flag2)
 238:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23c:	81 11       	cpse	r24, r1
 23e:	7c c0       	rjmp	.+248    	; 0x338 <APP_start+0x26a>
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	d0 e0       	ldi	r29, 0x00	; 0
 244:	75 c0       	rjmp	.+234    	; 0x330 <APP_start+0x262>
	{
	}
	else{
	for(int i =0;i<10;i++)
	{
		flag=0;
 246:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag>
	LED_on(LED_PED_PORT,LED_PED_RED_PIN);
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	82 e4       	ldi	r24, 0x42	; 66
 24e:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		if(car)
 252:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <car>
 256:	88 23       	and	r24, r24
 258:	91 f0       	breq	.+36     	; 0x27e <APP_start+0x1b0>
		{
	LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	81 e4       	ldi	r24, 0x41	; 65
 25e:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
	LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	81 e4       	ldi	r24, 0x41	; 65
 266:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
	LED_on(LED_CAR_PORT,LED_CAR_GREEN_PIN);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	81 e4       	ldi	r24, 0x41	; 65
 26e:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
	Timer0_N_delay_ms(500);
 272:	84 ef       	ldi	r24, 0xF4	; 244
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
	//Green
	if(flag2)
	{
	}
	else{
	for(int i =0;i<10;i++)
 27a:	21 96       	adiw	r28, 0x01	; 1
 27c:	59 c0       	rjmp	.+178    	; 0x330 <APP_start+0x262>
	Timer0_N_delay_ms(500);
	}
	else
	{
		//LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
		LED_on(LED_PED_PORT,LED_PED_RED_PIN);
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	82 e4       	ldi	r24, 0x42	; 66
 282:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	81 e4       	ldi	r24, 0x41	; 65
 28a:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	82 e4       	ldi	r24, 0x42	; 66
 292:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		for(int i =0;i<10;i++)
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d0 e0       	ldi	r29, 0x00	; 0
 29a:	1d c0       	rjmp	.+58     	; 0x2d6 <APP_start+0x208>
		{
			LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);  
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	81 e4       	ldi	r24, 0x41	; 65
 2a0:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);  
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	81 e4       	ldi	r24, 0x41	; 65
 2a8:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_off(LED_PED_PORT,LED_PED_RED_PIN);  
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	82 e4       	ldi	r24, 0x42	; 66
 2b0:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_off(LED_PED_PORT,LED_PED_GREEN_PIN); 
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	82 e4       	ldi	r24, 0x42	; 66
 2b8:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	81 e4       	ldi	r24, 0x41	; 65
 2c0:	0e 94 37 02 	call	0x46e	; 0x46e <LED_toggle>
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	82 e4       	ldi	r24, 0x42	; 66
 2c8:	0e 94 37 02 	call	0x46e	; 0x46e <LED_toggle>
			Timer0_N_delay_ms(500);
 2cc:	84 ef       	ldi	r24, 0xF4	; 244
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
	{
		//LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
		LED_on(LED_PED_PORT,LED_PED_RED_PIN);
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
		for(int i =0;i<10;i++)
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	ca 30       	cpi	r28, 0x0A	; 10
 2d8:	d1 05       	cpc	r29, r1
 2da:	04 f3       	brlt	.-64     	; 0x29c <APP_start+0x1ce>
			LED_off(LED_PED_PORT,LED_PED_GREEN_PIN); 
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
			Timer0_N_delay_ms(500);
		}
		LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	81 e4       	ldi	r24, 0x41	; 65
 2e0:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_RED_PIN);
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	82 e4       	ldi	r24, 0x42	; 66
 2e8:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	81 e4       	ldi	r24, 0x41	; 65
 2f0:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	82 e4       	ldi	r24, 0x42	; 66
 2f8:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_on(LED_PED_PORT,LED_PED_GREEN_PIN);
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	82 e4       	ldi	r24, 0x42	; 66
 300:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		LED_on(LED_CAR_PORT,LED_CAR_RED_PIN);
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	81 e4       	ldi	r24, 0x41	; 65
 308:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		Timer0_N_delay_ms(5000);
 30c:	88 e8       	ldi	r24, 0x88	; 136
 30e:	93 e1       	ldi	r25, 0x13	; 19
 310:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
		LED_off(LED_PED_PORT,LED_PED_GREEN_PIN);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	82 e4       	ldi	r24, 0x42	; 66
 318:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	81 e4       	ldi	r24, 0x41	; 65
 320:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		car=1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <car>
		flag=1;
 32a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag>
		break;
 32e:	04 c0       	rjmp	.+8      	; 0x338 <APP_start+0x26a>
	//Green
	if(flag2)
	{
	}
	else{
	for(int i =0;i<10;i++)
 330:	ca 30       	cpi	r28, 0x0A	; 10
 332:	d1 05       	cpc	r29, r1
 334:	0c f4       	brge	.+2      	; 0x338 <APP_start+0x26a>
 336:	87 cf       	rjmp	.-242    	; 0x246 <APP_start+0x178>
	   }
      }
	}
	
	//Yellow
	if(flag)
 338:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag>
 33c:	81 11       	cpse	r24, r1
 33e:	78 c0       	rjmp	.+240    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	d0 e0       	ldi	r29, 0x00	; 0
 344:	71 c0       	rjmp	.+226    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		
	}
	else{
	for(int i =0;i<10;i++)
	{
	LED_on(LED_PED_PORT,LED_PED_RED_PIN);
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	82 e4       	ldi	r24, 0x42	; 66
 34a:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
	LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN); 
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	81 e4       	ldi	r24, 0x41	; 65
 352:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
	LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);  
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	81 e4       	ldi	r24, 0x41	; 65
 35a:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		if(car){
 35e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <car>
 362:	88 23       	and	r24, r24
 364:	51 f0       	breq	.+20     	; 0x37a <APP_start+0x2ac>
		LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	81 e4       	ldi	r24, 0x41	; 65
 36a:	0e 94 37 02 	call	0x46e	; 0x46e <LED_toggle>
		Timer0_N_delay_ms(500);
 36e:	84 ef       	ldi	r24, 0xF4	; 244
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
	if(flag)
	{
		
	}
	else{
	for(int i =0;i<10;i++)
 376:	21 96       	adiw	r28, 0x01	; 1
 378:	57 c0       	rjmp	.+174    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
		Timer0_N_delay_ms(500);
	}
	else
	{
		LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	81 e4       	ldi	r24, 0x41	; 65
 37e:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_on(LED_PED_PORT,LED_PED_RED_PIN);
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	82 e4       	ldi	r24, 0x42	; 66
 386:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	81 e4       	ldi	r24, 0x41	; 65
 38e:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	82 e4       	ldi	r24, 0x42	; 66
 396:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		for(int i =0;i<10;i++)
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	1d c0       	rjmp	.+58     	; 0x3da <APP_start+0x30c>
		{
			LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN); 
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	81 e4       	ldi	r24, 0x41	; 65
 3a4:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);  
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	81 e4       	ldi	r24, 0x41	; 65
 3ac:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_off(LED_PED_PORT,LED_PED_RED_PIN); 
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	82 e4       	ldi	r24, 0x42	; 66
 3b4:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_off(LED_PED_PORT,LED_PED_GREEN_PIN);  
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	82 e4       	ldi	r24, 0x42	; 66
 3bc:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	81 e4       	ldi	r24, 0x41	; 65
 3c4:	0e 94 37 02 	call	0x46e	; 0x46e <LED_toggle>
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	82 e4       	ldi	r24, 0x42	; 66
 3cc:	0e 94 37 02 	call	0x46e	; 0x46e <LED_toggle>
			Timer0_N_delay_ms(500);
 3d0:	84 ef       	ldi	r24, 0xF4	; 244
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
	{
		LED_off(LED_CAR_PORT,LED_CAR_GREEN_PIN);
		LED_on(LED_PED_PORT,LED_PED_RED_PIN);
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
		for(int i =0;i<10;i++)
 3d8:	21 96       	adiw	r28, 0x01	; 1
 3da:	ca 30       	cpi	r28, 0x0A	; 10
 3dc:	d1 05       	cpc	r29, r1
 3de:	04 f3       	brlt	.-64     	; 0x3a0 <APP_start+0x2d2>
			LED_off(LED_PED_PORT,LED_PED_GREEN_PIN);  
			LED_toggle(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
			LED_toggle(LED_PED_PORT,LED_PED_YELLOW_PIN);
			Timer0_N_delay_ms(500);
		}
		LED_off(LED_PED_PORT,LED_PED_RED_PIN);
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	82 e4       	ldi	r24, 0x42	; 66
 3e4:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW_PIN);
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	81 e4       	ldi	r24, 0x41	; 65
 3ec:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_YELLOW_PIN);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	82 e4       	ldi	r24, 0x42	; 66
 3f4:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_on(LED_PED_PORT,LED_PED_GREEN_PIN);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	82 e4       	ldi	r24, 0x42	; 66
 3fc:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		LED_on(LED_CAR_PORT,LED_CAR_RED_PIN);
 400:	62 e0       	ldi	r22, 0x02	; 2
 402:	81 e4       	ldi	r24, 0x41	; 65
 404:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_on>
		Timer0_N_delay_ms(5000);
 408:	88 e8       	ldi	r24, 0x88	; 136
 40a:	93 e1       	ldi	r25, 0x13	; 19
 40c:	0e 94 6d 03 	call	0x6da	; 0x6da <Timer0_N_delay_ms>
		LED_off(LED_PED_PORT,LED_PED_GREEN_PIN);
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	82 e4       	ldi	r24, 0x42	; 66
 414:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_RED_PIN);
 418:	62 e0       	ldi	r22, 0x02	; 2
 41a:	81 e4       	ldi	r24, 0x41	; 65
 41c:	0e 94 33 02 	call	0x466	; 0x466 <LED_off>
		car=1;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <car>
		break;
 426:	04 c0       	rjmp	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	if(flag)
	{
		
	}
	else{
	for(int i =0;i<10;i++)
 428:	ca 30       	cpi	r28, 0x0A	; 10
 42a:	d1 05       	cpc	r29, r1
 42c:	0c f4       	brge	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42e:	8b cf       	rjmp	.-234    	; 0x346 <APP_start+0x278>
		car=1;
		break;
	}
  }
	}
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <__vector_1>:

 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <car>
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <BUTTON_init>:

#include "Button.h"

void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
	DIO_init(buttonPort,buttonPin,IN);
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_init>
 454:	08 95       	ret

00000456 <LED_init>:

#include "LED.h"

void LED_init(uint8_t LedPort,uint8_t LedPin)
{
	DIO_init(LedPort,LedPin,OUT);
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_init>
 45c:	08 95       	ret

0000045e <LED_on>:
}

void LED_on(uint8_t LedPort,uint8_t LedPin)
{
	DIO_write(LedPort,LedPin,HIGH);
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_write>
 464:	08 95       	ret

00000466 <LED_off>:
}

void LED_off(uint8_t LedPort,uint8_t LedPin)
{
	DIO_write(LedPort,LedPin,LOW);
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_write>
 46c:	08 95       	ret

0000046e <LED_toggle>:
}

void LED_toggle(uint8_t LedPort,uint8_t LedPin)
{
	DIO_toggle(LedPort,LedPin);
 46e:	0e 94 33 03 	call	0x666	; 0x666 <DIO_toggle>
 472:	08 95       	ret

00000474 <main>:
 */ 

#include "Application/Application.h"
int main(void)
{
      APP_init();
 474:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
    while (1) 
    {
		
		APP_start();
 478:	0e 94 67 00 	call	0xce	; 0xce <APP_start>
 47c:	fd cf       	rjmp	.-6      	; 0x478 <main+0x4>

0000047e <DIO_init>:
		case PORT_C:
			*value = READ_BIT(PINC,pinNumber);
		break;
		
		case PORT_D:
			*value = READ_BIT(PIND,pinNumber);
 47e:	82 34       	cpi	r24, 0x42	; 66
 480:	31 f1       	breq	.+76     	; 0x4ce <DIO_init+0x50>
 482:	18 f4       	brcc	.+6      	; 0x48a <DIO_init+0xc>
 484:	81 34       	cpi	r24, 0x41	; 65
 486:	39 f0       	breq	.+14     	; 0x496 <DIO_init+0x18>
 488:	08 95       	ret
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	e1 f1       	breq	.+120    	; 0x506 <DIO_init+0x88>
 48e:	84 34       	cpi	r24, 0x44	; 68
 490:	09 f4       	brne	.+2      	; 0x494 <DIO_init+0x16>
 492:	54 c0       	rjmp	.+168    	; 0x53c <DIO_init+0xbe>
 494:	08 95       	ret
 496:	41 11       	cpse	r20, r1
 498:	0c c0       	rjmp	.+24     	; 0x4b2 <DIO_init+0x34>
 49a:	2a b3       	in	r18, 0x1a	; 26
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_init+0x28>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_init+0x24>
 4aa:	80 95       	com	r24
 4ac:	82 23       	and	r24, r18
 4ae:	8a bb       	out	0x1a, r24	; 26
 4b0:	08 95       	ret
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <DIO_init+0x3a>
 4b6:	5c c0       	rjmp	.+184    	; 0x570 <DIO_init+0xf2>
 4b8:	2a b3       	in	r18, 0x1a	; 26
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_init+0x46>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_init+0x42>
 4c8:	82 2b       	or	r24, r18
 4ca:	8a bb       	out	0x1a, r24	; 26
 4cc:	08 95       	ret
 4ce:	41 11       	cpse	r20, r1
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_init+0x6c>
 4d2:	27 b3       	in	r18, 0x17	; 23
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_init+0x60>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_init+0x5c>
 4e2:	80 95       	com	r24
 4e4:	82 23       	and	r24, r18
 4e6:	87 bb       	out	0x17, r24	; 23
 4e8:	08 95       	ret
 4ea:	41 30       	cpi	r20, 0x01	; 1
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <DIO_init+0x72>
 4ee:	40 c0       	rjmp	.+128    	; 0x570 <DIO_init+0xf2>
 4f0:	27 b3       	in	r18, 0x17	; 23
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_init+0x7e>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	6a 95       	dec	r22
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_init+0x7a>
 500:	82 2b       	or	r24, r18
 502:	87 bb       	out	0x17, r24	; 23
 504:	08 95       	ret
 506:	41 11       	cpse	r20, r1
 508:	0c c0       	rjmp	.+24     	; 0x522 <DIO_init+0xa4>
 50a:	24 b3       	in	r18, 0x14	; 20
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_init+0x98>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	6a 95       	dec	r22
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_init+0x94>
 51a:	80 95       	com	r24
 51c:	82 23       	and	r24, r18
 51e:	84 bb       	out	0x14, r24	; 20
 520:	08 95       	ret
 522:	41 30       	cpi	r20, 0x01	; 1
 524:	29 f5       	brne	.+74     	; 0x570 <DIO_init+0xf2>
 526:	24 b3       	in	r18, 0x14	; 20
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_init+0xb4>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_init+0xb0>
 536:	82 2b       	or	r24, r18
 538:	84 bb       	out	0x14, r24	; 20
 53a:	08 95       	ret
 53c:	41 11       	cpse	r20, r1
 53e:	0c c0       	rjmp	.+24     	; 0x558 <DIO_init+0xda>
 540:	21 b3       	in	r18, 0x11	; 17
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_init+0xce>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_init+0xca>
 550:	80 95       	com	r24
 552:	82 23       	and	r24, r18
 554:	81 bb       	out	0x11, r24	; 17
 556:	08 95       	ret
 558:	41 30       	cpi	r20, 0x01	; 1
 55a:	51 f4       	brne	.+20     	; 0x570 <DIO_init+0xf2>
 55c:	21 b3       	in	r18, 0x11	; 17
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_init+0xea>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	6a 95       	dec	r22
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_init+0xe6>
 56c:	82 2b       	or	r24, r18
 56e:	81 bb       	out	0x11, r24	; 17
 570:	08 95       	ret

00000572 <DIO_write>:
	
}

void DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value){
	
		switch(portNumber)
 572:	82 34       	cpi	r24, 0x42	; 66
 574:	31 f1       	breq	.+76     	; 0x5c2 <DIO_write+0x50>
 576:	18 f4       	brcc	.+6      	; 0x57e <DIO_write+0xc>
 578:	81 34       	cpi	r24, 0x41	; 65
 57a:	39 f0       	breq	.+14     	; 0x58a <DIO_write+0x18>
 57c:	08 95       	ret
 57e:	83 34       	cpi	r24, 0x43	; 67
 580:	e1 f1       	breq	.+120    	; 0x5fa <DIO_write+0x88>
 582:	84 34       	cpi	r24, 0x44	; 68
 584:	09 f4       	brne	.+2      	; 0x588 <DIO_write+0x16>
 586:	54 c0       	rjmp	.+168    	; 0x630 <DIO_write+0xbe>
 588:	08 95       	ret
		{
		case PORT_A:
			if (value == LOW)
 58a:	41 11       	cpse	r20, r1
 58c:	0c c0       	rjmp	.+24     	; 0x5a6 <DIO_write+0x34>
				CLEAR_BIT(PORTA,pinNumber);
 58e:	2b b3       	in	r18, 0x1b	; 27
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_write+0x28>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_write+0x24>
 59e:	80 95       	com	r24
 5a0:	82 23       	and	r24, r18
 5a2:	8b bb       	out	0x1b, r24	; 27
 5a4:	08 95       	ret
			else if(value == HIGH)
 5a6:	41 30       	cpi	r20, 0x01	; 1
 5a8:	09 f0       	breq	.+2      	; 0x5ac <DIO_write+0x3a>
 5aa:	5c c0       	rjmp	.+184    	; 0x664 <DIO_write+0xf2>
				SET_BIT(PORTA,pinNumber);
 5ac:	2b b3       	in	r18, 0x1b	; 27
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_write+0x46>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_write+0x42>
 5bc:	82 2b       	or	r24, r18
 5be:	8b bb       	out	0x1b, r24	; 27
 5c0:	08 95       	ret
			{
			}
			break;
			
		case PORT_B:
			if (value == LOW)
 5c2:	41 11       	cpse	r20, r1
 5c4:	0c c0       	rjmp	.+24     	; 0x5de <DIO_write+0x6c>
				CLEAR_BIT(PORTB,pinNumber);
 5c6:	28 b3       	in	r18, 0x18	; 24
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_write+0x60>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_write+0x5c>
 5d6:	80 95       	com	r24
 5d8:	82 23       	and	r24, r18
 5da:	88 bb       	out	0x18, r24	; 24
 5dc:	08 95       	ret
			else if(value == HIGH)
 5de:	41 30       	cpi	r20, 0x01	; 1
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <DIO_write+0x72>
 5e2:	40 c0       	rjmp	.+128    	; 0x664 <DIO_write+0xf2>
				SET_BIT(PORTB,pinNumber);
 5e4:	28 b3       	in	r18, 0x18	; 24
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_write+0x7e>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_write+0x7a>
 5f4:	82 2b       	or	r24, r18
 5f6:	88 bb       	out	0x18, r24	; 24
 5f8:	08 95       	ret
			{
			}
		break;

		case PORT_C:
			if (value == LOW)
 5fa:	41 11       	cpse	r20, r1
 5fc:	0c c0       	rjmp	.+24     	; 0x616 <DIO_write+0xa4>
				CLEAR_BIT(PORTC,pinNumber);
 5fe:	25 b3       	in	r18, 0x15	; 21
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_write+0x98>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_write+0x94>
 60e:	80 95       	com	r24
 610:	82 23       	and	r24, r18
 612:	85 bb       	out	0x15, r24	; 21
 614:	08 95       	ret
			else if(value == HIGH)
 616:	41 30       	cpi	r20, 0x01	; 1
 618:	29 f5       	brne	.+74     	; 0x664 <DIO_write+0xf2>
				SET_BIT(PORTC,pinNumber);
 61a:	25 b3       	in	r18, 0x15	; 21
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_write+0xb4>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	6a 95       	dec	r22
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_write+0xb0>
 62a:	82 2b       	or	r24, r18
 62c:	85 bb       	out	0x15, r24	; 21
 62e:	08 95       	ret
			{
			}
		break;
		
		case PORT_D:
			if (value == LOW)
 630:	41 11       	cpse	r20, r1
 632:	0c c0       	rjmp	.+24     	; 0x64c <DIO_write+0xda>
				CLEAR_BIT(PORTD,pinNumber);
 634:	22 b3       	in	r18, 0x12	; 18
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_write+0xce>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_write+0xca>
 644:	80 95       	com	r24
 646:	82 23       	and	r24, r18
 648:	82 bb       	out	0x12, r24	; 18
 64a:	08 95       	ret
			else if(value == HIGH)
 64c:	41 30       	cpi	r20, 0x01	; 1
 64e:	51 f4       	brne	.+20     	; 0x664 <DIO_write+0xf2>
				SET_BIT(PORTD,pinNumber);
 650:	22 b3       	in	r18, 0x12	; 18
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_write+0xea>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	6a 95       	dec	r22
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_write+0xe6>
 660:	82 2b       	or	r24, r18
 662:	82 bb       	out	0x12, r24	; 18
 664:	08 95       	ret

00000666 <DIO_toggle>:
	
}

void DIO_toggle(uint8_t portNumber,uint8_t pinNumber)
{
	switch(portNumber){
 666:	82 34       	cpi	r24, 0x42	; 66
 668:	a1 f0       	breq	.+40     	; 0x692 <DIO_toggle+0x2c>
 66a:	18 f4       	brcc	.+6      	; 0x672 <DIO_toggle+0xc>
 66c:	81 34       	cpi	r24, 0x41	; 65
 66e:	31 f0       	breq	.+12     	; 0x67c <DIO_toggle+0x16>
 670:	08 95       	ret
 672:	83 34       	cpi	r24, 0x43	; 67
 674:	c9 f0       	breq	.+50     	; 0x6a8 <DIO_toggle+0x42>
 676:	84 34       	cpi	r24, 0x44	; 68
 678:	11 f1       	breq	.+68     	; 0x6be <DIO_toggle+0x58>
 67a:	08 95       	ret
		case PORT_A:
			TOGGLE_BIT(PORTA,pinNumber);
 67c:	2b b3       	in	r18, 0x1b	; 27
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_toggle+0x22>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	6a 95       	dec	r22
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_toggle+0x1e>
 68c:	82 27       	eor	r24, r18
 68e:	8b bb       	out	0x1b, r24	; 27
		break;
 690:	08 95       	ret
		
		case PORT_B:
			TOGGLE_BIT(PORTB,pinNumber);
 692:	28 b3       	in	r18, 0x18	; 24
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_toggle+0x38>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	6a 95       	dec	r22
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_toggle+0x34>
 6a2:	82 27       	eor	r24, r18
 6a4:	88 bb       	out	0x18, r24	; 24
		break;
 6a6:	08 95       	ret
		
		case PORT_C:
			TOGGLE_BIT(PORTC,pinNumber);
 6a8:	25 b3       	in	r18, 0x15	; 21
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_toggle+0x4e>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_toggle+0x4a>
 6b8:	82 27       	eor	r24, r18
 6ba:	85 bb       	out	0x15, r24	; 21
		break;
 6bc:	08 95       	ret
		
		case PORT_D:
			TOGGLE_BIT(PORTD,pinNumber);
 6be:	22 b3       	in	r18, 0x12	; 18
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_toggle+0x64>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_toggle+0x60>
 6ce:	82 27       	eor	r24, r18
 6d0:	82 bb       	out	0x12, r24	; 18
 6d2:	08 95       	ret

000006d4 <Timer0_init_N>:
 */ 
#include "timer.h"

void Timer0_init_N()
{
	TCCR0 = 0x00;    //Normal mode
 6d4:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 6d6:	12 be       	out	0x32, r1	; 50
 6d8:	08 95       	ret

000006da <Timer0_N_delay_ms>:
}
void Timer0_N_delay_ms(uint16_t delay_ms)
{
 6da:	8f 92       	push	r8
 6dc:	9f 92       	push	r9
 6de:	af 92       	push	r10
 6e0:	bf 92       	push	r11
 6e2:	cf 92       	push	r12
 6e4:	df 92       	push	r13
 6e6:	ef 92       	push	r14
 6e8:	ff 92       	push	r15
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
	double Ttick, TmaxDelay;
	uint16_t Noverflows,TInitial; 
	uint32_t overFlowcnt=0;
	Ttick = 256.0/1000.0;
	TmaxDelay = Ttick*pow(2,8);
	if(delay_ms < TmaxDelay)
 6ee:	bc 01       	movw	r22, r24
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__floatunsisf>
 6f8:	6b 01       	movw	r12, r22
 6fa:	7c 01       	movw	r14, r24
 6fc:	2f e6       	ldi	r18, 0x6F	; 111
 6fe:	32 e1       	ldi	r19, 0x12	; 18
 700:	43 e8       	ldi	r20, 0x83	; 131
 702:	52 e4       	ldi	r21, 0x42	; 66
 704:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__cmpsf2>
 708:	88 23       	and	r24, r24
 70a:	9c f4       	brge	.+38     	; 0x732 <Timer0_N_delay_ms+0x58>
	{
		TInitial = (TmaxDelay-delay_ms)/Ttick;
 70c:	a7 01       	movw	r20, r14
 70e:	96 01       	movw	r18, r12
 710:	6f e6       	ldi	r22, 0x6F	; 111
 712:	72 e1       	ldi	r23, 0x12	; 18
 714:	83 e8       	ldi	r24, 0x83	; 131
 716:	92 e4       	ldi	r25, 0x42	; 66
 718:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__subsf3>
 71c:	2f e6       	ldi	r18, 0x6F	; 111
 71e:	32 e1       	ldi	r19, 0x12	; 18
 720:	43 e8       	ldi	r20, 0x83	; 131
 722:	5e e3       	ldi	r21, 0x3E	; 62
 724:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__divsf3>
 728:	0e 94 ef 04 	call	0x9de	; 0x9de <__fixunssfsi>
		Noverflows = 1;
 72c:	c1 e0       	ldi	r28, 0x01	; 1
 72e:	d0 e0       	ldi	r29, 0x00	; 0
 730:	3c c0       	rjmp	.+120    	; 0x7aa <Timer0_N_delay_ms+0xd0>
	}
	else if(delay_ms == TmaxDelay)
 732:	2f e6       	ldi	r18, 0x6F	; 111
 734:	32 e1       	ldi	r19, 0x12	; 18
 736:	43 e8       	ldi	r20, 0x83	; 131
 738:	52 e4       	ldi	r21, 0x42	; 66
 73a:	c7 01       	movw	r24, r14
 73c:	b6 01       	movw	r22, r12
 73e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__cmpsf2>
 742:	88 23       	and	r24, r24
 744:	79 f1       	breq	.+94     	; 0x7a4 <Timer0_N_delay_ms+0xca>
		TInitial = 0;
		Noverflows = 1;
	}
	else
	{
		Noverflows = ceil(delay_ms/TmaxDelay);
 746:	2f e6       	ldi	r18, 0x6F	; 111
 748:	32 e1       	ldi	r19, 0x12	; 18
 74a:	43 e8       	ldi	r20, 0x83	; 131
 74c:	52 e4       	ldi	r21, 0x42	; 66
 74e:	c7 01       	movw	r24, r14
 750:	b6 01       	movw	r22, r12
 752:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__divsf3>
 756:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ceil>
 75a:	0e 94 ef 04 	call	0x9de	; 0x9de <__fixunssfsi>
 75e:	4b 01       	movw	r8, r22
 760:	5c 01       	movw	r10, r24
 762:	eb 01       	movw	r28, r22
		TInitial = 256.0 - ((delay_ms/Ttick)/Noverflows);
 764:	2f e6       	ldi	r18, 0x6F	; 111
 766:	32 e1       	ldi	r19, 0x12	; 18
 768:	43 e8       	ldi	r20, 0x83	; 131
 76a:	5e e3       	ldi	r21, 0x3E	; 62
 76c:	c7 01       	movw	r24, r14
 76e:	b6 01       	movw	r22, r12
 770:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__divsf3>
 774:	6b 01       	movw	r12, r22
 776:	7c 01       	movw	r14, r24
 778:	b4 01       	movw	r22, r8
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__floatunsisf>
 782:	9b 01       	movw	r18, r22
 784:	ac 01       	movw	r20, r24
 786:	c7 01       	movw	r24, r14
 788:	b6 01       	movw	r22, r12
 78a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__divsf3>
 78e:	9b 01       	movw	r18, r22
 790:	ac 01       	movw	r20, r24
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	80 e8       	ldi	r24, 0x80	; 128
 798:	93 e4       	ldi	r25, 0x43	; 67
 79a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__subsf3>
 79e:	0e 94 ef 04 	call	0x9de	; 0x9de <__fixunssfsi>
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <Timer0_N_delay_ms+0xd0>
		TInitial = (TmaxDelay-delay_ms)/Ttick;
		Noverflows = 1;
	}
	else if(delay_ms == TmaxDelay)
	{
		TInitial = 0;
 7a4:	60 e0       	ldi	r22, 0x00	; 0
		Noverflows = 1;
 7a6:	c1 e0       	ldi	r28, 0x01	; 1
 7a8:	d0 e0       	ldi	r29, 0x00	; 0
	else
	{
		Noverflows = ceil(delay_ms/TmaxDelay);
		TInitial = 256.0 - ((delay_ms/Ttick)/Noverflows);
	}
	TCNT0 = TInitial;
 7aa:	62 bf       	out	0x32, r22	; 50
		TCCR0 |= (1<<2);    //set 256 p_rescaling
 7ac:	83 b7       	in	r24, 0x33	; 51
 7ae:	84 60       	ori	r24, 0x04	; 4
 7b0:	83 bf       	out	0x33, r24	; 51
	 * FCPU 1Mhz
	 * using normal mode
	 */
	double Ttick, TmaxDelay;
	uint16_t Noverflows,TInitial; 
	uint32_t overFlowcnt=0;
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	30 e0       	ldi	r19, 0x00	; 0
		Noverflows = ceil(delay_ms/TmaxDelay);
		TInitial = 256.0 - ((delay_ms/Ttick)/Noverflows);
	}
	TCNT0 = TInitial;
		TCCR0 |= (1<<2);    //set 256 p_rescaling
		while(overFlowcnt<Noverflows)
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <Timer0_N_delay_ms+0xee>
		{
			while(READ_BIT(TIFR,0)==0);
 7b8:	08 b6       	in	r0, 0x38	; 56
 7ba:	00 fe       	sbrs	r0, 0
 7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <Timer0_N_delay_ms+0xde>
			SET_BIT(TIFR,0);
 7be:	88 b7       	in	r24, 0x38	; 56
 7c0:	81 60       	ori	r24, 0x01	; 1
 7c2:	88 bf       	out	0x38, r24	; 56
			overFlowcnt++;
 7c4:	2f 5f       	subi	r18, 0xFF	; 255
 7c6:	3f 4f       	sbci	r19, 0xFF	; 255
		Noverflows = ceil(delay_ms/TmaxDelay);
		TInitial = 256.0 - ((delay_ms/Ttick)/Noverflows);
	}
	TCNT0 = TInitial;
		TCCR0 |= (1<<2);    //set 256 p_rescaling
		while(overFlowcnt<Noverflows)
 7c8:	2c 17       	cp	r18, r28
 7ca:	3d 07       	cpc	r19, r29
 7cc:	a8 f3       	brcs	.-22     	; 0x7b8 <Timer0_N_delay_ms+0xde>
		{
			while(READ_BIT(TIFR,0)==0);
			SET_BIT(TIFR,0);
			overFlowcnt++;
		}
		TCCR0 = 0x00;
 7ce:	13 be       	out	0x33, r1	; 51
		TCNT0 = 0x00;
 7d0:	12 be       	out	0x32, r1	; 50
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	ff 90       	pop	r15
 7d8:	ef 90       	pop	r14
 7da:	df 90       	pop	r13
 7dc:	cf 90       	pop	r12
 7de:	bf 90       	pop	r11
 7e0:	af 90       	pop	r10
 7e2:	9f 90       	pop	r9
 7e4:	8f 90       	pop	r8
 7e6:	08 95       	ret

000007e8 <__subsf3>:
 7e8:	50 58       	subi	r21, 0x80	; 128

000007ea <__addsf3>:
 7ea:	bb 27       	eor	r27, r27
 7ec:	aa 27       	eor	r26, r26
 7ee:	0e 94 0c 04 	call	0x818	; 0x818 <__addsf3x>
 7f2:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_round>
 7f6:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_pscA>
 7fa:	38 f0       	brcs	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fc:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_pscB>
 800:	20 f0       	brcs	.+8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 802:	39 f4       	brne	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 804:	9f 3f       	cpi	r25, 0xFF	; 255
 806:	19 f4       	brne	.+6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 808:	26 f4       	brtc	.+8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80a:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_nan>
 80e:	0e f4       	brtc	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 810:	e0 95       	com	r30
 812:	e7 fb       	bst	r30, 7
 814:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_inf>

00000818 <__addsf3x>:
 818:	e9 2f       	mov	r30, r25
 81a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_split3>
 81e:	58 f3       	brcs	.-42     	; 0x7f6 <__addsf3+0xc>
 820:	ba 17       	cp	r27, r26
 822:	62 07       	cpc	r22, r18
 824:	73 07       	cpc	r23, r19
 826:	84 07       	cpc	r24, r20
 828:	95 07       	cpc	r25, r21
 82a:	20 f0       	brcs	.+8      	; 0x834 <__addsf3x+0x1c>
 82c:	79 f4       	brne	.+30     	; 0x84c <__addsf3x+0x34>
 82e:	a6 f5       	brtc	.+104    	; 0x898 <__stack+0x39>
 830:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_zero>
 834:	0e f4       	brtc	.+2      	; 0x838 <__addsf3x+0x20>
 836:	e0 95       	com	r30
 838:	0b 2e       	mov	r0, r27
 83a:	ba 2f       	mov	r27, r26
 83c:	a0 2d       	mov	r26, r0
 83e:	0b 01       	movw	r0, r22
 840:	b9 01       	movw	r22, r18
 842:	90 01       	movw	r18, r0
 844:	0c 01       	movw	r0, r24
 846:	ca 01       	movw	r24, r20
 848:	a0 01       	movw	r20, r0
 84a:	11 24       	eor	r1, r1
 84c:	ff 27       	eor	r31, r31
 84e:	59 1b       	sub	r21, r25
 850:	99 f0       	breq	.+38     	; 0x878 <__stack+0x19>
 852:	59 3f       	cpi	r21, 0xF9	; 249
 854:	50 f4       	brcc	.+20     	; 0x86a <__stack+0xb>
 856:	50 3e       	cpi	r21, 0xE0	; 224
 858:	68 f1       	brcs	.+90     	; 0x8b4 <__stack+0x55>
 85a:	1a 16       	cp	r1, r26
 85c:	f0 40       	sbci	r31, 0x00	; 0
 85e:	a2 2f       	mov	r26, r18
 860:	23 2f       	mov	r18, r19
 862:	34 2f       	mov	r19, r20
 864:	44 27       	eor	r20, r20
 866:	58 5f       	subi	r21, 0xF8	; 248
 868:	f3 cf       	rjmp	.-26     	; 0x850 <__addsf3x+0x38>
 86a:	46 95       	lsr	r20
 86c:	37 95       	ror	r19
 86e:	27 95       	ror	r18
 870:	a7 95       	ror	r26
 872:	f0 40       	sbci	r31, 0x00	; 0
 874:	53 95       	inc	r21
 876:	c9 f7       	brne	.-14     	; 0x86a <__stack+0xb>
 878:	7e f4       	brtc	.+30     	; 0x898 <__stack+0x39>
 87a:	1f 16       	cp	r1, r31
 87c:	ba 0b       	sbc	r27, r26
 87e:	62 0b       	sbc	r22, r18
 880:	73 0b       	sbc	r23, r19
 882:	84 0b       	sbc	r24, r20
 884:	ba f0       	brmi	.+46     	; 0x8b4 <__stack+0x55>
 886:	91 50       	subi	r25, 0x01	; 1
 888:	a1 f0       	breq	.+40     	; 0x8b2 <__stack+0x53>
 88a:	ff 0f       	add	r31, r31
 88c:	bb 1f       	adc	r27, r27
 88e:	66 1f       	adc	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	c2 f7       	brpl	.-16     	; 0x886 <__stack+0x27>
 896:	0e c0       	rjmp	.+28     	; 0x8b4 <__stack+0x55>
 898:	ba 0f       	add	r27, r26
 89a:	62 1f       	adc	r22, r18
 89c:	73 1f       	adc	r23, r19
 89e:	84 1f       	adc	r24, r20
 8a0:	48 f4       	brcc	.+18     	; 0x8b4 <__stack+0x55>
 8a2:	87 95       	ror	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	b7 95       	ror	r27
 8aa:	f7 95       	ror	r31
 8ac:	9e 3f       	cpi	r25, 0xFE	; 254
 8ae:	08 f0       	brcs	.+2      	; 0x8b2 <__stack+0x53>
 8b0:	b0 cf       	rjmp	.-160    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 8b2:	93 95       	inc	r25
 8b4:	88 0f       	add	r24, r24
 8b6:	08 f0       	brcs	.+2      	; 0x8ba <__stack+0x5b>
 8b8:	99 27       	eor	r25, r25
 8ba:	ee 0f       	add	r30, r30
 8bc:	97 95       	ror	r25
 8be:	87 95       	ror	r24
 8c0:	08 95       	ret

000008c2 <ceil>:
 8c2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_trunc>
 8c6:	90 f0       	brcs	.+36     	; 0x8ec <ceil+0x2a>
 8c8:	9f 37       	cpi	r25, 0x7F	; 127
 8ca:	48 f4       	brcc	.+18     	; 0x8de <ceil+0x1c>
 8cc:	91 11       	cpse	r25, r1
 8ce:	16 f4       	brtc	.+4      	; 0x8d4 <ceil+0x12>
 8d0:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_szero>
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	80 e8       	ldi	r24, 0x80	; 128
 8da:	9f e3       	ldi	r25, 0x3F	; 63
 8dc:	08 95       	ret
 8de:	26 f0       	brts	.+8      	; 0x8e8 <ceil+0x26>
 8e0:	1b 16       	cp	r1, r27
 8e2:	61 1d       	adc	r22, r1
 8e4:	71 1d       	adc	r23, r1
 8e6:	81 1d       	adc	r24, r1
 8e8:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_mintl>
 8ec:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__fp_mpack>

000008f0 <__cmpsf2>:
 8f0:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_cmp>
 8f4:	08 f4       	brcc	.+2      	; 0x8f8 <__cmpsf2+0x8>
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	08 95       	ret

000008fa <__divsf3>:
 8fa:	0e 94 91 04 	call	0x922	; 0x922 <__divsf3x>
 8fe:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_round>
 902:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_pscB>
 906:	58 f0       	brcs	.+22     	; 0x91e <__divsf3+0x24>
 908:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_pscA>
 90c:	40 f0       	brcs	.+16     	; 0x91e <__divsf3+0x24>
 90e:	29 f4       	brne	.+10     	; 0x91a <__divsf3+0x20>
 910:	5f 3f       	cpi	r21, 0xFF	; 255
 912:	29 f0       	breq	.+10     	; 0x91e <__divsf3+0x24>
 914:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_inf>
 918:	51 11       	cpse	r21, r1
 91a:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_szero>
 91e:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_nan>

00000922 <__divsf3x>:
 922:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_split3>
 926:	68 f3       	brcs	.-38     	; 0x902 <__divsf3+0x8>

00000928 <__divsf3_pse>:
 928:	99 23       	and	r25, r25
 92a:	b1 f3       	breq	.-20     	; 0x918 <__divsf3+0x1e>
 92c:	55 23       	and	r21, r21
 92e:	91 f3       	breq	.-28     	; 0x914 <__divsf3+0x1a>
 930:	95 1b       	sub	r25, r21
 932:	55 0b       	sbc	r21, r21
 934:	bb 27       	eor	r27, r27
 936:	aa 27       	eor	r26, r26
 938:	62 17       	cp	r22, r18
 93a:	73 07       	cpc	r23, r19
 93c:	84 07       	cpc	r24, r20
 93e:	38 f0       	brcs	.+14     	; 0x94e <__divsf3_pse+0x26>
 940:	9f 5f       	subi	r25, 0xFF	; 255
 942:	5f 4f       	sbci	r21, 0xFF	; 255
 944:	22 0f       	add	r18, r18
 946:	33 1f       	adc	r19, r19
 948:	44 1f       	adc	r20, r20
 94a:	aa 1f       	adc	r26, r26
 94c:	a9 f3       	breq	.-22     	; 0x938 <__divsf3_pse+0x10>
 94e:	35 d0       	rcall	.+106    	; 0x9ba <__divsf3_pse+0x92>
 950:	0e 2e       	mov	r0, r30
 952:	3a f0       	brmi	.+14     	; 0x962 <__divsf3_pse+0x3a>
 954:	e0 e8       	ldi	r30, 0x80	; 128
 956:	32 d0       	rcall	.+100    	; 0x9bc <__divsf3_pse+0x94>
 958:	91 50       	subi	r25, 0x01	; 1
 95a:	50 40       	sbci	r21, 0x00	; 0
 95c:	e6 95       	lsr	r30
 95e:	00 1c       	adc	r0, r0
 960:	ca f7       	brpl	.-14     	; 0x954 <__divsf3_pse+0x2c>
 962:	2b d0       	rcall	.+86     	; 0x9ba <__divsf3_pse+0x92>
 964:	fe 2f       	mov	r31, r30
 966:	29 d0       	rcall	.+82     	; 0x9ba <__divsf3_pse+0x92>
 968:	66 0f       	add	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	88 1f       	adc	r24, r24
 96e:	bb 1f       	adc	r27, r27
 970:	26 17       	cp	r18, r22
 972:	37 07       	cpc	r19, r23
 974:	48 07       	cpc	r20, r24
 976:	ab 07       	cpc	r26, r27
 978:	b0 e8       	ldi	r27, 0x80	; 128
 97a:	09 f0       	breq	.+2      	; 0x97e <__divsf3_pse+0x56>
 97c:	bb 0b       	sbc	r27, r27
 97e:	80 2d       	mov	r24, r0
 980:	bf 01       	movw	r22, r30
 982:	ff 27       	eor	r31, r31
 984:	93 58       	subi	r25, 0x83	; 131
 986:	5f 4f       	sbci	r21, 0xFF	; 255
 988:	3a f0       	brmi	.+14     	; 0x998 <__divsf3_pse+0x70>
 98a:	9e 3f       	cpi	r25, 0xFE	; 254
 98c:	51 05       	cpc	r21, r1
 98e:	78 f0       	brcs	.+30     	; 0x9ae <__divsf3_pse+0x86>
 990:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_inf>
 994:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_szero>
 998:	5f 3f       	cpi	r21, 0xFF	; 255
 99a:	e4 f3       	brlt	.-8      	; 0x994 <__divsf3_pse+0x6c>
 99c:	98 3e       	cpi	r25, 0xE8	; 232
 99e:	d4 f3       	brlt	.-12     	; 0x994 <__divsf3_pse+0x6c>
 9a0:	86 95       	lsr	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	b7 95       	ror	r27
 9a8:	f7 95       	ror	r31
 9aa:	9f 5f       	subi	r25, 0xFF	; 255
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__divsf3_pse+0x78>
 9ae:	88 0f       	add	r24, r24
 9b0:	91 1d       	adc	r25, r1
 9b2:	96 95       	lsr	r25
 9b4:	87 95       	ror	r24
 9b6:	97 f9       	bld	r25, 7
 9b8:	08 95       	ret
 9ba:	e1 e0       	ldi	r30, 0x01	; 1
 9bc:	66 0f       	add	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	bb 1f       	adc	r27, r27
 9c4:	62 17       	cp	r22, r18
 9c6:	73 07       	cpc	r23, r19
 9c8:	84 07       	cpc	r24, r20
 9ca:	ba 07       	cpc	r27, r26
 9cc:	20 f0       	brcs	.+8      	; 0x9d6 <__divsf3_pse+0xae>
 9ce:	62 1b       	sub	r22, r18
 9d0:	73 0b       	sbc	r23, r19
 9d2:	84 0b       	sbc	r24, r20
 9d4:	ba 0b       	sbc	r27, r26
 9d6:	ee 1f       	adc	r30, r30
 9d8:	88 f7       	brcc	.-30     	; 0x9bc <__divsf3_pse+0x94>
 9da:	e0 95       	com	r30
 9dc:	08 95       	ret

000009de <__fixunssfsi>:
 9de:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_splitA>
 9e2:	88 f0       	brcs	.+34     	; 0xa06 <__fixunssfsi+0x28>
 9e4:	9f 57       	subi	r25, 0x7F	; 127
 9e6:	98 f0       	brcs	.+38     	; 0xa0e <__fixunssfsi+0x30>
 9e8:	b9 2f       	mov	r27, r25
 9ea:	99 27       	eor	r25, r25
 9ec:	b7 51       	subi	r27, 0x17	; 23
 9ee:	b0 f0       	brcs	.+44     	; 0xa1c <__fixunssfsi+0x3e>
 9f0:	e1 f0       	breq	.+56     	; 0xa2a <__fixunssfsi+0x4c>
 9f2:	66 0f       	add	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	1a f0       	brmi	.+6      	; 0xa02 <__fixunssfsi+0x24>
 9fc:	ba 95       	dec	r27
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__fixunssfsi+0x14>
 a00:	14 c0       	rjmp	.+40     	; 0xa2a <__fixunssfsi+0x4c>
 a02:	b1 30       	cpi	r27, 0x01	; 1
 a04:	91 f0       	breq	.+36     	; 0xa2a <__fixunssfsi+0x4c>
 a06:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fp_zero>
 a0a:	b1 e0       	ldi	r27, 0x01	; 1
 a0c:	08 95       	ret
 a0e:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_zero>
 a12:	67 2f       	mov	r22, r23
 a14:	78 2f       	mov	r23, r24
 a16:	88 27       	eor	r24, r24
 a18:	b8 5f       	subi	r27, 0xF8	; 248
 a1a:	39 f0       	breq	.+14     	; 0xa2a <__fixunssfsi+0x4c>
 a1c:	b9 3f       	cpi	r27, 0xF9	; 249
 a1e:	cc f3       	brlt	.-14     	; 0xa12 <__fixunssfsi+0x34>
 a20:	86 95       	lsr	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b3 95       	inc	r27
 a28:	d9 f7       	brne	.-10     	; 0xa20 <__fixunssfsi+0x42>
 a2a:	3e f4       	brtc	.+14     	; 0xa3a <__fixunssfsi+0x5c>
 a2c:	90 95       	com	r25
 a2e:	80 95       	com	r24
 a30:	70 95       	com	r23
 a32:	61 95       	neg	r22
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	08 95       	ret

00000a3c <__floatunsisf>:
 a3c:	e8 94       	clt
 a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__floatsisf+0x12>

00000a40 <__floatsisf>:
 a40:	97 fb       	bst	r25, 7
 a42:	3e f4       	brtc	.+14     	; 0xa52 <__floatsisf+0x12>
 a44:	90 95       	com	r25
 a46:	80 95       	com	r24
 a48:	70 95       	com	r23
 a4a:	61 95       	neg	r22
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	99 23       	and	r25, r25
 a54:	a9 f0       	breq	.+42     	; 0xa80 <__floatsisf+0x40>
 a56:	f9 2f       	mov	r31, r25
 a58:	96 e9       	ldi	r25, 0x96	; 150
 a5a:	bb 27       	eor	r27, r27
 a5c:	93 95       	inc	r25
 a5e:	f6 95       	lsr	r31
 a60:	87 95       	ror	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b7 95       	ror	r27
 a68:	f1 11       	cpse	r31, r1
 a6a:	f8 cf       	rjmp	.-16     	; 0xa5c <__floatsisf+0x1c>
 a6c:	fa f4       	brpl	.+62     	; 0xaac <__floatsisf+0x6c>
 a6e:	bb 0f       	add	r27, r27
 a70:	11 f4       	brne	.+4      	; 0xa76 <__floatsisf+0x36>
 a72:	60 ff       	sbrs	r22, 0
 a74:	1b c0       	rjmp	.+54     	; 0xaac <__floatsisf+0x6c>
 a76:	6f 5f       	subi	r22, 0xFF	; 255
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	16 c0       	rjmp	.+44     	; 0xaac <__floatsisf+0x6c>
 a80:	88 23       	and	r24, r24
 a82:	11 f0       	breq	.+4      	; 0xa88 <__floatsisf+0x48>
 a84:	96 e9       	ldi	r25, 0x96	; 150
 a86:	11 c0       	rjmp	.+34     	; 0xaaa <__floatsisf+0x6a>
 a88:	77 23       	and	r23, r23
 a8a:	21 f0       	breq	.+8      	; 0xa94 <__floatsisf+0x54>
 a8c:	9e e8       	ldi	r25, 0x8E	; 142
 a8e:	87 2f       	mov	r24, r23
 a90:	76 2f       	mov	r23, r22
 a92:	05 c0       	rjmp	.+10     	; 0xa9e <__floatsisf+0x5e>
 a94:	66 23       	and	r22, r22
 a96:	71 f0       	breq	.+28     	; 0xab4 <__floatsisf+0x74>
 a98:	96 e8       	ldi	r25, 0x86	; 134
 a9a:	86 2f       	mov	r24, r22
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	60 e0       	ldi	r22, 0x00	; 0
 aa0:	2a f0       	brmi	.+10     	; 0xaac <__floatsisf+0x6c>
 aa2:	9a 95       	dec	r25
 aa4:	66 0f       	add	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	88 1f       	adc	r24, r24
 aaa:	da f7       	brpl	.-10     	; 0xaa2 <__floatsisf+0x62>
 aac:	88 0f       	add	r24, r24
 aae:	96 95       	lsr	r25
 ab0:	87 95       	ror	r24
 ab2:	97 f9       	bld	r25, 7
 ab4:	08 95       	ret

00000ab6 <__fp_cmp>:
 ab6:	99 0f       	add	r25, r25
 ab8:	00 08       	sbc	r0, r0
 aba:	55 0f       	add	r21, r21
 abc:	aa 0b       	sbc	r26, r26
 abe:	e0 e8       	ldi	r30, 0x80	; 128
 ac0:	fe ef       	ldi	r31, 0xFE	; 254
 ac2:	16 16       	cp	r1, r22
 ac4:	17 06       	cpc	r1, r23
 ac6:	e8 07       	cpc	r30, r24
 ac8:	f9 07       	cpc	r31, r25
 aca:	c0 f0       	brcs	.+48     	; 0xafc <__fp_cmp+0x46>
 acc:	12 16       	cp	r1, r18
 ace:	13 06       	cpc	r1, r19
 ad0:	e4 07       	cpc	r30, r20
 ad2:	f5 07       	cpc	r31, r21
 ad4:	98 f0       	brcs	.+38     	; 0xafc <__fp_cmp+0x46>
 ad6:	62 1b       	sub	r22, r18
 ad8:	73 0b       	sbc	r23, r19
 ada:	84 0b       	sbc	r24, r20
 adc:	95 0b       	sbc	r25, r21
 ade:	39 f4       	brne	.+14     	; 0xaee <__fp_cmp+0x38>
 ae0:	0a 26       	eor	r0, r26
 ae2:	61 f0       	breq	.+24     	; 0xafc <__fp_cmp+0x46>
 ae4:	23 2b       	or	r18, r19
 ae6:	24 2b       	or	r18, r20
 ae8:	25 2b       	or	r18, r21
 aea:	21 f4       	brne	.+8      	; 0xaf4 <__fp_cmp+0x3e>
 aec:	08 95       	ret
 aee:	0a 26       	eor	r0, r26
 af0:	09 f4       	brne	.+2      	; 0xaf4 <__fp_cmp+0x3e>
 af2:	a1 40       	sbci	r26, 0x01	; 1
 af4:	a6 95       	lsr	r26
 af6:	8f ef       	ldi	r24, 0xFF	; 255
 af8:	81 1d       	adc	r24, r1
 afa:	81 1d       	adc	r24, r1
 afc:	08 95       	ret

00000afe <__fp_inf>:
 afe:	97 f9       	bld	r25, 7
 b00:	9f 67       	ori	r25, 0x7F	; 127
 b02:	80 e8       	ldi	r24, 0x80	; 128
 b04:	70 e0       	ldi	r23, 0x00	; 0
 b06:	60 e0       	ldi	r22, 0x00	; 0
 b08:	08 95       	ret

00000b0a <__fp_mintl>:
 b0a:	88 23       	and	r24, r24
 b0c:	71 f4       	brne	.+28     	; 0xb2a <__fp_mintl+0x20>
 b0e:	77 23       	and	r23, r23
 b10:	21 f0       	breq	.+8      	; 0xb1a <__fp_mintl+0x10>
 b12:	98 50       	subi	r25, 0x08	; 8
 b14:	87 2b       	or	r24, r23
 b16:	76 2f       	mov	r23, r22
 b18:	07 c0       	rjmp	.+14     	; 0xb28 <__fp_mintl+0x1e>
 b1a:	66 23       	and	r22, r22
 b1c:	11 f4       	brne	.+4      	; 0xb22 <__fp_mintl+0x18>
 b1e:	99 27       	eor	r25, r25
 b20:	0d c0       	rjmp	.+26     	; 0xb3c <__fp_mintl+0x32>
 b22:	90 51       	subi	r25, 0x10	; 16
 b24:	86 2b       	or	r24, r22
 b26:	70 e0       	ldi	r23, 0x00	; 0
 b28:	60 e0       	ldi	r22, 0x00	; 0
 b2a:	2a f0       	brmi	.+10     	; 0xb36 <__fp_mintl+0x2c>
 b2c:	9a 95       	dec	r25
 b2e:	66 0f       	add	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	da f7       	brpl	.-10     	; 0xb2c <__fp_mintl+0x22>
 b36:	88 0f       	add	r24, r24
 b38:	96 95       	lsr	r25
 b3a:	87 95       	ror	r24
 b3c:	97 f9       	bld	r25, 7
 b3e:	08 95       	ret

00000b40 <__fp_mpack>:
 b40:	9f 3f       	cpi	r25, 0xFF	; 255
 b42:	31 f0       	breq	.+12     	; 0xb50 <__fp_mpack_finite+0xc>

00000b44 <__fp_mpack_finite>:
 b44:	91 50       	subi	r25, 0x01	; 1
 b46:	20 f4       	brcc	.+8      	; 0xb50 <__fp_mpack_finite+0xc>
 b48:	87 95       	ror	r24
 b4a:	77 95       	ror	r23
 b4c:	67 95       	ror	r22
 b4e:	b7 95       	ror	r27
 b50:	88 0f       	add	r24, r24
 b52:	91 1d       	adc	r25, r1
 b54:	96 95       	lsr	r25
 b56:	87 95       	ror	r24
 b58:	97 f9       	bld	r25, 7
 b5a:	08 95       	ret

00000b5c <__fp_nan>:
 b5c:	9f ef       	ldi	r25, 0xFF	; 255
 b5e:	80 ec       	ldi	r24, 0xC0	; 192
 b60:	08 95       	ret

00000b62 <__fp_pscA>:
 b62:	00 24       	eor	r0, r0
 b64:	0a 94       	dec	r0
 b66:	16 16       	cp	r1, r22
 b68:	17 06       	cpc	r1, r23
 b6a:	18 06       	cpc	r1, r24
 b6c:	09 06       	cpc	r0, r25
 b6e:	08 95       	ret

00000b70 <__fp_pscB>:
 b70:	00 24       	eor	r0, r0
 b72:	0a 94       	dec	r0
 b74:	12 16       	cp	r1, r18
 b76:	13 06       	cpc	r1, r19
 b78:	14 06       	cpc	r1, r20
 b7a:	05 06       	cpc	r0, r21
 b7c:	08 95       	ret

00000b7e <__fp_round>:
 b7e:	09 2e       	mov	r0, r25
 b80:	03 94       	inc	r0
 b82:	00 0c       	add	r0, r0
 b84:	11 f4       	brne	.+4      	; 0xb8a <__fp_round+0xc>
 b86:	88 23       	and	r24, r24
 b88:	52 f0       	brmi	.+20     	; 0xb9e <__fp_round+0x20>
 b8a:	bb 0f       	add	r27, r27
 b8c:	40 f4       	brcc	.+16     	; 0xb9e <__fp_round+0x20>
 b8e:	bf 2b       	or	r27, r31
 b90:	11 f4       	brne	.+4      	; 0xb96 <__fp_round+0x18>
 b92:	60 ff       	sbrs	r22, 0
 b94:	04 c0       	rjmp	.+8      	; 0xb9e <__fp_round+0x20>
 b96:	6f 5f       	subi	r22, 0xFF	; 255
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	08 95       	ret

00000ba0 <__fp_split3>:
 ba0:	57 fd       	sbrc	r21, 7
 ba2:	90 58       	subi	r25, 0x80	; 128
 ba4:	44 0f       	add	r20, r20
 ba6:	55 1f       	adc	r21, r21
 ba8:	59 f0       	breq	.+22     	; 0xbc0 <__fp_splitA+0x10>
 baa:	5f 3f       	cpi	r21, 0xFF	; 255
 bac:	71 f0       	breq	.+28     	; 0xbca <__fp_splitA+0x1a>
 bae:	47 95       	ror	r20

00000bb0 <__fp_splitA>:
 bb0:	88 0f       	add	r24, r24
 bb2:	97 fb       	bst	r25, 7
 bb4:	99 1f       	adc	r25, r25
 bb6:	61 f0       	breq	.+24     	; 0xbd0 <__fp_splitA+0x20>
 bb8:	9f 3f       	cpi	r25, 0xFF	; 255
 bba:	79 f0       	breq	.+30     	; 0xbda <__fp_splitA+0x2a>
 bbc:	87 95       	ror	r24
 bbe:	08 95       	ret
 bc0:	12 16       	cp	r1, r18
 bc2:	13 06       	cpc	r1, r19
 bc4:	14 06       	cpc	r1, r20
 bc6:	55 1f       	adc	r21, r21
 bc8:	f2 cf       	rjmp	.-28     	; 0xbae <__fp_split3+0xe>
 bca:	46 95       	lsr	r20
 bcc:	f1 df       	rcall	.-30     	; 0xbb0 <__fp_splitA>
 bce:	08 c0       	rjmp	.+16     	; 0xbe0 <__fp_splitA+0x30>
 bd0:	16 16       	cp	r1, r22
 bd2:	17 06       	cpc	r1, r23
 bd4:	18 06       	cpc	r1, r24
 bd6:	99 1f       	adc	r25, r25
 bd8:	f1 cf       	rjmp	.-30     	; 0xbbc <__fp_splitA+0xc>
 bda:	86 95       	lsr	r24
 bdc:	71 05       	cpc	r23, r1
 bde:	61 05       	cpc	r22, r1
 be0:	08 94       	sec
 be2:	08 95       	ret

00000be4 <__fp_trunc>:
 be4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_splitA>
 be8:	a0 f0       	brcs	.+40     	; 0xc12 <__fp_trunc+0x2e>
 bea:	be e7       	ldi	r27, 0x7E	; 126
 bec:	b9 17       	cp	r27, r25
 bee:	88 f4       	brcc	.+34     	; 0xc12 <__fp_trunc+0x2e>
 bf0:	bb 27       	eor	r27, r27
 bf2:	9f 38       	cpi	r25, 0x8F	; 143
 bf4:	60 f4       	brcc	.+24     	; 0xc0e <__fp_trunc+0x2a>
 bf6:	16 16       	cp	r1, r22
 bf8:	b1 1d       	adc	r27, r1
 bfa:	67 2f       	mov	r22, r23
 bfc:	78 2f       	mov	r23, r24
 bfe:	88 27       	eor	r24, r24
 c00:	98 5f       	subi	r25, 0xF8	; 248
 c02:	f7 cf       	rjmp	.-18     	; 0xbf2 <__fp_trunc+0xe>
 c04:	86 95       	lsr	r24
 c06:	77 95       	ror	r23
 c08:	67 95       	ror	r22
 c0a:	b1 1d       	adc	r27, r1
 c0c:	93 95       	inc	r25
 c0e:	96 39       	cpi	r25, 0x96	; 150
 c10:	c8 f3       	brcs	.-14     	; 0xc04 <__fp_trunc+0x20>
 c12:	08 95       	ret

00000c14 <__fp_zero>:
 c14:	e8 94       	clt

00000c16 <__fp_szero>:
 c16:	bb 27       	eor	r27, r27
 c18:	66 27       	eor	r22, r22
 c1a:	77 27       	eor	r23, r23
 c1c:	cb 01       	movw	r24, r22
 c1e:	97 f9       	bld	r25, 7
 c20:	08 95       	ret

00000c22 <_exit>:
 c22:	f8 94       	cli

00000c24 <__stop_program>:
 c24:	ff cf       	rjmp	.-2      	; 0xc24 <__stop_program>
